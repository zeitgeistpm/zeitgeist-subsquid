// This file has been auto-generated by Warthog.  Do not update directly as it
// will be re-written.  If you need to change this file, update models or add
// new TypeGraphQL objects
// prettier-ignore
// @ts-ignore
import { DateResolver as Date } from 'graphql-scalars';
// prettier-ignore
// @ts-ignore
import { GraphQLID as ID } from 'graphql';
// prettier-ignore
// @ts-ignore
import { ArgsType, Field as TypeGraphQLField, Float, InputType as TypeGraphQLInputType, Int } from 'type-graphql';
// prettier-ignore
// @ts-ignore
import { registerEnumType, GraphQLISODateTime as DateTime } from "type-graphql";

import * as BN from "bn.js";

// prettier-ignore
// @ts-ignore eslint-disable-next-line @typescript-eslint/no-var-requires
const { GraphQLJSONObject } = require('graphql-type-json');
// prettier-ignore
// @ts-ignore
import { BaseWhereInput, JsonObject, PaginationArgs, DateOnlyString, DateTimeString, BigInt, Bytes } from '@subsquid/warthog';

// @ts-ignore
import { AssetBalance } from "../modules/asset-balance/asset-balance.model";
// @ts-ignore
import { HistoricalAssetBalance } from "../modules/historical-asset-balance/historical-asset-balance.model";
// @ts-ignore
import { Account } from "../modules/account/account.model";
// @ts-ignore
import { Pool } from "../modules/pool/pool.model";
// @ts-ignore
import { HistoricalPool } from "../modules/historical-pool/historical-pool.model";
// @ts-ignore
import { CategoryMetadata } from "../modules/jsonfields/jsonfields.model";
// @ts-ignore
import { MarketDisputeMechanism } from "../modules/jsonfields/jsonfields.model";
// @ts-ignore
import { MarketHistory } from "../modules/jsonfields/jsonfields.model";
// @ts-ignore
import { MarketPeriod } from "../modules/jsonfields/jsonfields.model";
// @ts-ignore
import { MarketReport } from "../modules/jsonfields/jsonfields.model";
// @ts-ignore
import { MarketType } from "../modules/jsonfields/jsonfields.model";
// @ts-ignore
import { OutcomeReport } from "../modules/jsonfields/jsonfields.model";
// @ts-ignore
import { Market } from "../modules/market/market.model";

export enum AssetBalanceOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  account_ASC = "account_ASC",
  account_DESC = "account_DESC",

  assetId_ASC = "assetId_ASC",
  assetId_DESC = "assetId_DESC",

  balance_ASC = "balance_ASC",
  balance_DESC = "balance_DESC",
}

registerEnumType(AssetBalanceOrderByEnum, {
  name: "AssetBalanceOrderByInput",
});

@TypeGraphQLInputType()
export class AssetBalanceWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  assetId_eq?: string;

  @TypeGraphQLField({ nullable: true })
  assetId_contains?: string;

  @TypeGraphQLField({ nullable: true })
  assetId_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  assetId_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  assetId_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  balance_in?: string[];

  @TypeGraphQLField(() => AccountWhereInput, { nullable: true })
  account?: AccountWhereInput;

  @TypeGraphQLField(() => AssetBalanceWhereInput, { nullable: true })
  AND?: [AssetBalanceWhereInput];

  @TypeGraphQLField(() => AssetBalanceWhereInput, { nullable: true })
  OR?: [AssetBalanceWhereInput];
}

@TypeGraphQLInputType()
export class AssetBalanceWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class AssetBalanceCreateInput {
  @TypeGraphQLField(() => ID)
  account!: string;

  @TypeGraphQLField()
  assetId!: string;

  @TypeGraphQLField()
  balance!: string;
}

@TypeGraphQLInputType()
export class AssetBalanceUpdateInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  account?: string;

  @TypeGraphQLField({ nullable: true })
  assetId?: string;

  @TypeGraphQLField({ nullable: true })
  balance?: string;
}

@ArgsType()
export class AssetBalanceWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => AssetBalanceWhereInput, { nullable: true })
  where?: AssetBalanceWhereInput;

  @TypeGraphQLField(() => AssetBalanceOrderByEnum, { nullable: true })
  orderBy?: AssetBalanceOrderByEnum[];
}

@ArgsType()
export class AssetBalanceCreateManyArgs {
  @TypeGraphQLField(() => [AssetBalanceCreateInput])
  data!: AssetBalanceCreateInput[];
}

@ArgsType()
export class AssetBalanceUpdateArgs {
  @TypeGraphQLField() data!: AssetBalanceUpdateInput;
  @TypeGraphQLField() where!: AssetBalanceWhereUniqueInput;
}

export enum HistoricalAssetBalanceOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  account_ASC = "account_ASC",
  account_DESC = "account_DESC",

  event_ASC = "event_ASC",
  event_DESC = "event_DESC",

  assetId_ASC = "assetId_ASC",
  assetId_DESC = "assetId_DESC",

  amount_ASC = "amount_ASC",
  amount_DESC = "amount_DESC",

  balance_ASC = "balance_ASC",
  balance_DESC = "balance_DESC",

  blockNumber_ASC = "blockNumber_ASC",
  blockNumber_DESC = "blockNumber_DESC",

  timestamp_ASC = "timestamp_ASC",
  timestamp_DESC = "timestamp_DESC",
}

registerEnumType(HistoricalAssetBalanceOrderByEnum, {
  name: "HistoricalAssetBalanceOrderByInput",
});

@TypeGraphQLInputType()
export class HistoricalAssetBalanceWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  event_eq?: string;

  @TypeGraphQLField({ nullable: true })
  event_contains?: string;

  @TypeGraphQLField({ nullable: true })
  event_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  event_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  event_in?: string[];

  @TypeGraphQLField({ nullable: true })
  assetId_eq?: string;

  @TypeGraphQLField({ nullable: true })
  assetId_contains?: string;

  @TypeGraphQLField({ nullable: true })
  assetId_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  assetId_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  assetId_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  amount_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  balance_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  blockNumber_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  blockNumber_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  blockNumber_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  blockNumber_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  blockNumber_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  blockNumber_in?: number[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  timestamp_in?: string[];

  @TypeGraphQLField(() => AccountWhereInput, { nullable: true })
  account?: AccountWhereInput;

  @TypeGraphQLField(() => HistoricalAssetBalanceWhereInput, { nullable: true })
  AND?: [HistoricalAssetBalanceWhereInput];

  @TypeGraphQLField(() => HistoricalAssetBalanceWhereInput, { nullable: true })
  OR?: [HistoricalAssetBalanceWhereInput];
}

@TypeGraphQLInputType()
export class HistoricalAssetBalanceWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class HistoricalAssetBalanceCreateInput {
  @TypeGraphQLField(() => ID)
  account!: string;

  @TypeGraphQLField()
  event!: string;

  @TypeGraphQLField()
  assetId!: string;

  @TypeGraphQLField()
  amount!: string;

  @TypeGraphQLField()
  balance!: string;

  @TypeGraphQLField()
  blockNumber!: number;

  @TypeGraphQLField()
  timestamp!: string;
}

@TypeGraphQLInputType()
export class HistoricalAssetBalanceUpdateInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  account?: string;

  @TypeGraphQLField({ nullable: true })
  event?: string;

  @TypeGraphQLField({ nullable: true })
  assetId?: string;

  @TypeGraphQLField({ nullable: true })
  amount?: string;

  @TypeGraphQLField({ nullable: true })
  balance?: string;

  @TypeGraphQLField({ nullable: true })
  blockNumber?: number;

  @TypeGraphQLField({ nullable: true })
  timestamp?: string;
}

@ArgsType()
export class HistoricalAssetBalanceWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => HistoricalAssetBalanceWhereInput, { nullable: true })
  where?: HistoricalAssetBalanceWhereInput;

  @TypeGraphQLField(() => HistoricalAssetBalanceOrderByEnum, { nullable: true })
  orderBy?: HistoricalAssetBalanceOrderByEnum[];
}

@ArgsType()
export class HistoricalAssetBalanceCreateManyArgs {
  @TypeGraphQLField(() => [HistoricalAssetBalanceCreateInput])
  data!: HistoricalAssetBalanceCreateInput[];
}

@ArgsType()
export class HistoricalAssetBalanceUpdateArgs {
  @TypeGraphQLField() data!: HistoricalAssetBalanceUpdateInput;
  @TypeGraphQLField() where!: HistoricalAssetBalanceWhereUniqueInput;
}

export enum AccountOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  wallet_ASC = "wallet_ASC",
  wallet_DESC = "wallet_DESC",
}

registerEnumType(AccountOrderByEnum, {
  name: "AccountOrderByInput",
});

@TypeGraphQLInputType()
export class AccountWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  wallet_eq?: string;

  @TypeGraphQLField({ nullable: true })
  wallet_contains?: string;

  @TypeGraphQLField({ nullable: true })
  wallet_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  wallet_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  wallet_in?: string[];

  @TypeGraphQLField(() => AssetBalanceWhereInput, { nullable: true })
  assetBalances_none?: AssetBalanceWhereInput;

  @TypeGraphQLField(() => AssetBalanceWhereInput, { nullable: true })
  assetBalances_some?: AssetBalanceWhereInput;

  @TypeGraphQLField(() => AssetBalanceWhereInput, { nullable: true })
  assetBalances_every?: AssetBalanceWhereInput;

  @TypeGraphQLField(() => HistoricalAssetBalanceWhereInput, { nullable: true })
  historicalAssetBalances_none?: HistoricalAssetBalanceWhereInput;

  @TypeGraphQLField(() => HistoricalAssetBalanceWhereInput, { nullable: true })
  historicalAssetBalances_some?: HistoricalAssetBalanceWhereInput;

  @TypeGraphQLField(() => HistoricalAssetBalanceWhereInput, { nullable: true })
  historicalAssetBalances_every?: HistoricalAssetBalanceWhereInput;

  @TypeGraphQLField(() => AccountWhereInput, { nullable: true })
  AND?: [AccountWhereInput];

  @TypeGraphQLField(() => AccountWhereInput, { nullable: true })
  OR?: [AccountWhereInput];
}

@TypeGraphQLInputType()
export class AccountWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class AccountCreateInput {
  @TypeGraphQLField()
  wallet!: string;
}

@TypeGraphQLInputType()
export class AccountUpdateInput {
  @TypeGraphQLField({ nullable: true })
  wallet?: string;
}

@ArgsType()
export class AccountWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => AccountWhereInput, { nullable: true })
  where?: AccountWhereInput;

  @TypeGraphQLField(() => AccountOrderByEnum, { nullable: true })
  orderBy?: AccountOrderByEnum[];
}

@ArgsType()
export class AccountCreateManyArgs {
  @TypeGraphQLField(() => [AccountCreateInput])
  data!: AccountCreateInput[];
}

@ArgsType()
export class AccountUpdateArgs {
  @TypeGraphQLField() data!: AccountUpdateInput;
  @TypeGraphQLField() where!: AccountWhereUniqueInput;
}

export enum PoolOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  poolId_ASC = "poolId_ASC",
  poolId_DESC = "poolId_DESC",

  baseAsset_ASC = "baseAsset_ASC",
  baseAsset_DESC = "baseAsset_DESC",

  marketId_ASC = "marketId_ASC",
  marketId_DESC = "marketId_DESC",

  poolStatus_ASC = "poolStatus_ASC",
  poolStatus_DESC = "poolStatus_DESC",

  scoringRule_ASC = "scoringRule_ASC",
  scoringRule_DESC = "scoringRule_DESC",

  swapFee_ASC = "swapFee_ASC",
  swapFee_DESC = "swapFee_DESC",

  totalSubsidy_ASC = "totalSubsidy_ASC",
  totalSubsidy_DESC = "totalSubsidy_DESC",

  totalWeight_ASC = "totalWeight_ASC",
  totalWeight_DESC = "totalWeight_DESC",
}

registerEnumType(PoolOrderByEnum, {
  name: "PoolOrderByInput",
});

@TypeGraphQLInputType()
export class PoolWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  poolId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  poolId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  poolId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  poolId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  poolId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  poolId_in?: number[];

  @TypeGraphQLField({ nullable: true })
  baseAsset_eq?: string;

  @TypeGraphQLField({ nullable: true })
  baseAsset_contains?: string;

  @TypeGraphQLField({ nullable: true })
  baseAsset_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  baseAsset_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  baseAsset_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  marketId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  marketId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  marketId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  marketId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  marketId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  marketId_in?: number[];

  @TypeGraphQLField({ nullable: true })
  poolStatus_eq?: string;

  @TypeGraphQLField({ nullable: true })
  poolStatus_contains?: string;

  @TypeGraphQLField({ nullable: true })
  poolStatus_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  poolStatus_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  poolStatus_in?: string[];

  @TypeGraphQLField({ nullable: true })
  scoringRule_eq?: string;

  @TypeGraphQLField({ nullable: true })
  scoringRule_contains?: string;

  @TypeGraphQLField({ nullable: true })
  scoringRule_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  scoringRule_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  scoringRule_in?: string[];

  @TypeGraphQLField({ nullable: true })
  swapFee_eq?: string;

  @TypeGraphQLField({ nullable: true })
  swapFee_contains?: string;

  @TypeGraphQLField({ nullable: true })
  swapFee_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  swapFee_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  swapFee_in?: string[];

  @TypeGraphQLField({ nullable: true })
  totalSubsidy_eq?: string;

  @TypeGraphQLField({ nullable: true })
  totalSubsidy_contains?: string;

  @TypeGraphQLField({ nullable: true })
  totalSubsidy_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  totalSubsidy_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  totalSubsidy_in?: string[];

  @TypeGraphQLField({ nullable: true })
  totalWeight_eq?: string;

  @TypeGraphQLField({ nullable: true })
  totalWeight_contains?: string;

  @TypeGraphQLField({ nullable: true })
  totalWeight_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  totalWeight_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  totalWeight_in?: string[];

  @TypeGraphQLField(() => HistoricalPoolWhereInput, { nullable: true })
  historicalPool_none?: HistoricalPoolWhereInput;

  @TypeGraphQLField(() => HistoricalPoolWhereInput, { nullable: true })
  historicalPool_some?: HistoricalPoolWhereInput;

  @TypeGraphQLField(() => HistoricalPoolWhereInput, { nullable: true })
  historicalPool_every?: HistoricalPoolWhereInput;

  @TypeGraphQLField(() => PoolWhereInput, { nullable: true })
  AND?: [PoolWhereInput];

  @TypeGraphQLField(() => PoolWhereInput, { nullable: true })
  OR?: [PoolWhereInput];
}

@TypeGraphQLInputType()
export class PoolWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class PoolCreateInput {
  @TypeGraphQLField()
  poolId!: number;

  @TypeGraphQLField()
  baseAsset!: string;

  @TypeGraphQLField()
  marketId!: number;

  @TypeGraphQLField()
  poolStatus!: string;

  @TypeGraphQLField()
  scoringRule!: string;

  @TypeGraphQLField()
  swapFee!: string;

  @TypeGraphQLField()
  totalSubsidy!: string;

  @TypeGraphQLField()
  totalWeight!: string;
}

@TypeGraphQLInputType()
export class PoolUpdateInput {
  @TypeGraphQLField({ nullable: true })
  poolId?: number;

  @TypeGraphQLField({ nullable: true })
  baseAsset?: string;

  @TypeGraphQLField({ nullable: true })
  marketId?: number;

  @TypeGraphQLField({ nullable: true })
  poolStatus?: string;

  @TypeGraphQLField({ nullable: true })
  scoringRule?: string;

  @TypeGraphQLField({ nullable: true })
  swapFee?: string;

  @TypeGraphQLField({ nullable: true })
  totalSubsidy?: string;

  @TypeGraphQLField({ nullable: true })
  totalWeight?: string;
}

@ArgsType()
export class PoolWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => PoolWhereInput, { nullable: true })
  where?: PoolWhereInput;

  @TypeGraphQLField(() => PoolOrderByEnum, { nullable: true })
  orderBy?: PoolOrderByEnum[];
}

@ArgsType()
export class PoolCreateManyArgs {
  @TypeGraphQLField(() => [PoolCreateInput])
  data!: PoolCreateInput[];
}

@ArgsType()
export class PoolUpdateArgs {
  @TypeGraphQLField() data!: PoolUpdateInput;
  @TypeGraphQLField() where!: PoolWhereUniqueInput;
}

export enum HistoricalPoolOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  pool_ASC = "pool_ASC",
  pool_DESC = "pool_DESC",

  event_ASC = "event_ASC",
  event_DESC = "event_DESC",

  blockNumber_ASC = "blockNumber_ASC",
  blockNumber_DESC = "blockNumber_DESC",

  timestamp_ASC = "timestamp_ASC",
  timestamp_DESC = "timestamp_DESC",
}

registerEnumType(HistoricalPoolOrderByEnum, {
  name: "HistoricalPoolOrderByInput",
});

@TypeGraphQLInputType()
export class HistoricalPoolWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  event_eq?: string;

  @TypeGraphQLField({ nullable: true })
  event_contains?: string;

  @TypeGraphQLField({ nullable: true })
  event_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  event_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  event_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  blockNumber_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  blockNumber_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  blockNumber_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  blockNumber_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  blockNumber_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  blockNumber_in?: number[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  timestamp_in?: string[];

  @TypeGraphQLField(() => PoolWhereInput, { nullable: true })
  pool?: PoolWhereInput;

  @TypeGraphQLField(() => HistoricalPoolWhereInput, { nullable: true })
  AND?: [HistoricalPoolWhereInput];

  @TypeGraphQLField(() => HistoricalPoolWhereInput, { nullable: true })
  OR?: [HistoricalPoolWhereInput];
}

@TypeGraphQLInputType()
export class HistoricalPoolWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class HistoricalPoolCreateInput {
  @TypeGraphQLField(() => ID)
  pool!: string;

  @TypeGraphQLField()
  event!: string;

  @TypeGraphQLField()
  blockNumber!: number;

  @TypeGraphQLField()
  timestamp!: string;
}

@TypeGraphQLInputType()
export class HistoricalPoolUpdateInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  pool?: string;

  @TypeGraphQLField({ nullable: true })
  event?: string;

  @TypeGraphQLField({ nullable: true })
  blockNumber?: number;

  @TypeGraphQLField({ nullable: true })
  timestamp?: string;
}

@ArgsType()
export class HistoricalPoolWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => HistoricalPoolWhereInput, { nullable: true })
  where?: HistoricalPoolWhereInput;

  @TypeGraphQLField(() => HistoricalPoolOrderByEnum, { nullable: true })
  orderBy?: HistoricalPoolOrderByEnum[];
}

@ArgsType()
export class HistoricalPoolCreateManyArgs {
  @TypeGraphQLField(() => [HistoricalPoolCreateInput])
  data!: HistoricalPoolCreateInput[];
}

@ArgsType()
export class HistoricalPoolUpdateArgs {
  @TypeGraphQLField() data!: HistoricalPoolUpdateInput;
  @TypeGraphQLField() where!: HistoricalPoolWhereUniqueInput;
}

export enum CategoryMetadataOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  name_ASC = "name_ASC",
  name_DESC = "name_DESC",

  ticker_ASC = "ticker_ASC",
  ticker_DESC = "ticker_DESC",

  img_ASC = "img_ASC",
  img_DESC = "img_DESC",

  color_ASC = "color_ASC",
  color_DESC = "color_DESC",
}

registerEnumType(CategoryMetadataOrderByEnum, {
  name: "CategoryMetadataOrderByInput",
});

@TypeGraphQLInputType()
export class CategoryMetadataWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  name_eq?: string;

  @TypeGraphQLField({ nullable: true })
  name_contains?: string;

  @TypeGraphQLField({ nullable: true })
  name_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  name_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  name_in?: string[];

  @TypeGraphQLField({ nullable: true })
  ticker_eq?: string;

  @TypeGraphQLField({ nullable: true })
  ticker_contains?: string;

  @TypeGraphQLField({ nullable: true })
  ticker_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  ticker_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  ticker_in?: string[];

  @TypeGraphQLField({ nullable: true })
  img_eq?: string;

  @TypeGraphQLField({ nullable: true })
  img_contains?: string;

  @TypeGraphQLField({ nullable: true })
  img_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  img_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  img_in?: string[];

  @TypeGraphQLField({ nullable: true })
  color_eq?: string;

  @TypeGraphQLField({ nullable: true })
  color_contains?: string;

  @TypeGraphQLField({ nullable: true })
  color_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  color_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  color_in?: string[];

  @TypeGraphQLField(() => CategoryMetadataWhereInput, { nullable: true })
  AND?: [CategoryMetadataWhereInput];

  @TypeGraphQLField(() => CategoryMetadataWhereInput, { nullable: true })
  OR?: [CategoryMetadataWhereInput];
}

@TypeGraphQLInputType()
export class CategoryMetadataWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class CategoryMetadataCreateInput {
  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField({ nullable: true })
  ticker?: string;

  @TypeGraphQLField({ nullable: true })
  img?: string;

  @TypeGraphQLField({ nullable: true })
  color?: string;
}

@TypeGraphQLInputType()
export class CategoryMetadataUpdateInput {
  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField({ nullable: true })
  ticker?: string;

  @TypeGraphQLField({ nullable: true })
  img?: string;

  @TypeGraphQLField({ nullable: true })
  color?: string;
}

@ArgsType()
export class CategoryMetadataWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => CategoryMetadataWhereInput, { nullable: true })
  where?: CategoryMetadataWhereInput;

  @TypeGraphQLField(() => CategoryMetadataOrderByEnum, { nullable: true })
  orderBy?: CategoryMetadataOrderByEnum[];
}

@ArgsType()
export class CategoryMetadataCreateManyArgs {
  @TypeGraphQLField(() => [CategoryMetadataCreateInput])
  data!: CategoryMetadataCreateInput[];
}

@ArgsType()
export class CategoryMetadataUpdateArgs {
  @TypeGraphQLField() data!: CategoryMetadataUpdateInput;
  @TypeGraphQLField() where!: CategoryMetadataWhereUniqueInput;
}

export enum MarketDisputeMechanismOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  authorized_ASC = "authorized_ASC",
  authorized_DESC = "authorized_DESC",

  court_ASC = "court_ASC",
  court_DESC = "court_DESC",

  simpleDisputes_ASC = "simpleDisputes_ASC",
  simpleDisputes_DESC = "simpleDisputes_DESC",
}

registerEnumType(MarketDisputeMechanismOrderByEnum, {
  name: "MarketDisputeMechanismOrderByInput",
});

@TypeGraphQLInputType()
export class MarketDisputeMechanismWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  authorized_eq?: string;

  @TypeGraphQLField({ nullable: true })
  authorized_contains?: string;

  @TypeGraphQLField({ nullable: true })
  authorized_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  authorized_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  authorized_in?: string[];

  @TypeGraphQLField(() => Boolean, { nullable: true })
  court_eq?: Boolean;

  @TypeGraphQLField(() => [Boolean], { nullable: true })
  court_in?: Boolean[];

  @TypeGraphQLField(() => Boolean, { nullable: true })
  simpleDisputes_eq?: Boolean;

  @TypeGraphQLField(() => [Boolean], { nullable: true })
  simpleDisputes_in?: Boolean[];

  @TypeGraphQLField(() => MarketDisputeMechanismWhereInput, { nullable: true })
  AND?: [MarketDisputeMechanismWhereInput];

  @TypeGraphQLField(() => MarketDisputeMechanismWhereInput, { nullable: true })
  OR?: [MarketDisputeMechanismWhereInput];
}

@TypeGraphQLInputType()
export class MarketDisputeMechanismWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class MarketDisputeMechanismCreateInput {
  @TypeGraphQLField({ nullable: true })
  authorized?: string;

  @TypeGraphQLField({ nullable: true })
  court?: boolean;

  @TypeGraphQLField({ nullable: true })
  simpleDisputes?: boolean;
}

@TypeGraphQLInputType()
export class MarketDisputeMechanismUpdateInput {
  @TypeGraphQLField({ nullable: true })
  authorized?: string;

  @TypeGraphQLField({ nullable: true })
  court?: boolean;

  @TypeGraphQLField({ nullable: true })
  simpleDisputes?: boolean;
}

@ArgsType()
export class MarketDisputeMechanismWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => MarketDisputeMechanismWhereInput, { nullable: true })
  where?: MarketDisputeMechanismWhereInput;

  @TypeGraphQLField(() => MarketDisputeMechanismOrderByEnum, { nullable: true })
  orderBy?: MarketDisputeMechanismOrderByEnum[];
}

@ArgsType()
export class MarketDisputeMechanismCreateManyArgs {
  @TypeGraphQLField(() => [MarketDisputeMechanismCreateInput])
  data!: MarketDisputeMechanismCreateInput[];
}

@ArgsType()
export class MarketDisputeMechanismUpdateArgs {
  @TypeGraphQLField() data!: MarketDisputeMechanismUpdateInput;
  @TypeGraphQLField() where!: MarketDisputeMechanismWhereUniqueInput;
}

export enum MarketHistoryOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  event_ASC = "event_ASC",
  event_DESC = "event_DESC",

  status_ASC = "status_ASC",
  status_DESC = "status_DESC",

  poolId_ASC = "poolId_ASC",
  poolId_DESC = "poolId_DESC",

  resolvedOutcome_ASC = "resolvedOutcome_ASC",
  resolvedOutcome_DESC = "resolvedOutcome_DESC",

  blockNumber_ASC = "blockNumber_ASC",
  blockNumber_DESC = "blockNumber_DESC",

  timestamp_ASC = "timestamp_ASC",
  timestamp_DESC = "timestamp_DESC",
}

registerEnumType(MarketHistoryOrderByEnum, {
  name: "MarketHistoryOrderByInput",
});

@TypeGraphQLInputType()
export class MarketHistoryWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  event_eq?: string;

  @TypeGraphQLField({ nullable: true })
  event_contains?: string;

  @TypeGraphQLField({ nullable: true })
  event_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  event_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  event_in?: string[];

  @TypeGraphQLField({ nullable: true })
  status_eq?: string;

  @TypeGraphQLField({ nullable: true })
  status_contains?: string;

  @TypeGraphQLField({ nullable: true })
  status_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  status_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  status_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  poolId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  poolId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  poolId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  poolId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  poolId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  poolId_in?: number[];

  @TypeGraphQLField({ nullable: true })
  resolvedOutcome_eq?: string;

  @TypeGraphQLField({ nullable: true })
  resolvedOutcome_contains?: string;

  @TypeGraphQLField({ nullable: true })
  resolvedOutcome_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  resolvedOutcome_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  resolvedOutcome_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  blockNumber_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  blockNumber_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  blockNumber_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  blockNumber_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  blockNumber_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  blockNumber_in?: number[];

  @TypeGraphQLField({ nullable: true })
  timestamp_eq?: string;

  @TypeGraphQLField({ nullable: true })
  timestamp_contains?: string;

  @TypeGraphQLField({ nullable: true })
  timestamp_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  timestamp_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  timestamp_in?: string[];

  @TypeGraphQLField(() => MarketHistoryWhereInput, { nullable: true })
  AND?: [MarketHistoryWhereInput];

  @TypeGraphQLField(() => MarketHistoryWhereInput, { nullable: true })
  OR?: [MarketHistoryWhereInput];
}

@TypeGraphQLInputType()
export class MarketHistoryWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class MarketHistoryCreateInput {
  @TypeGraphQLField({ nullable: true })
  event?: string;

  @TypeGraphQLField({ nullable: true })
  status?: string;

  @TypeGraphQLField({ nullable: true })
  poolId?: number;

  @TypeGraphQLField({ nullable: true })
  resolvedOutcome?: string;

  @TypeGraphQLField({ nullable: true })
  blockNumber?: number;

  @TypeGraphQLField({ nullable: true })
  timestamp?: string;
}

@TypeGraphQLInputType()
export class MarketHistoryUpdateInput {
  @TypeGraphQLField({ nullable: true })
  event?: string;

  @TypeGraphQLField({ nullable: true })
  status?: string;

  @TypeGraphQLField({ nullable: true })
  poolId?: number;

  @TypeGraphQLField({ nullable: true })
  resolvedOutcome?: string;

  @TypeGraphQLField({ nullable: true })
  blockNumber?: number;

  @TypeGraphQLField({ nullable: true })
  timestamp?: string;
}

@ArgsType()
export class MarketHistoryWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => MarketHistoryWhereInput, { nullable: true })
  where?: MarketHistoryWhereInput;

  @TypeGraphQLField(() => MarketHistoryOrderByEnum, { nullable: true })
  orderBy?: MarketHistoryOrderByEnum[];
}

@ArgsType()
export class MarketHistoryCreateManyArgs {
  @TypeGraphQLField(() => [MarketHistoryCreateInput])
  data!: MarketHistoryCreateInput[];
}

@ArgsType()
export class MarketHistoryUpdateArgs {
  @TypeGraphQLField() data!: MarketHistoryUpdateInput;
  @TypeGraphQLField() where!: MarketHistoryWhereUniqueInput;
}

export enum MarketPeriodOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  block_ASC = "block_ASC",
  block_DESC = "block_DESC",

  timestamp_ASC = "timestamp_ASC",
  timestamp_DESC = "timestamp_DESC",
}

registerEnumType(MarketPeriodOrderByEnum, {
  name: "MarketPeriodOrderByInput",
});

@TypeGraphQLInputType()
export class MarketPeriodWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  block_eq?: string;

  @TypeGraphQLField({ nullable: true })
  block_contains?: string;

  @TypeGraphQLField({ nullable: true })
  block_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  block_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  block_in?: string[];

  @TypeGraphQLField({ nullable: true })
  timestamp_eq?: string;

  @TypeGraphQLField({ nullable: true })
  timestamp_contains?: string;

  @TypeGraphQLField({ nullable: true })
  timestamp_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  timestamp_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  timestamp_in?: string[];

  @TypeGraphQLField(() => MarketPeriodWhereInput, { nullable: true })
  AND?: [MarketPeriodWhereInput];

  @TypeGraphQLField(() => MarketPeriodWhereInput, { nullable: true })
  OR?: [MarketPeriodWhereInput];
}

@TypeGraphQLInputType()
export class MarketPeriodWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class MarketPeriodCreateInput {
  @TypeGraphQLField({ nullable: true })
  block?: string;

  @TypeGraphQLField({ nullable: true })
  timestamp?: string;
}

@TypeGraphQLInputType()
export class MarketPeriodUpdateInput {
  @TypeGraphQLField({ nullable: true })
  block?: string;

  @TypeGraphQLField({ nullable: true })
  timestamp?: string;
}

@ArgsType()
export class MarketPeriodWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => MarketPeriodWhereInput, { nullable: true })
  where?: MarketPeriodWhereInput;

  @TypeGraphQLField(() => MarketPeriodOrderByEnum, { nullable: true })
  orderBy?: MarketPeriodOrderByEnum[];
}

@ArgsType()
export class MarketPeriodCreateManyArgs {
  @TypeGraphQLField(() => [MarketPeriodCreateInput])
  data!: MarketPeriodCreateInput[];
}

@ArgsType()
export class MarketPeriodUpdateArgs {
  @TypeGraphQLField() data!: MarketPeriodUpdateInput;
  @TypeGraphQLField() where!: MarketPeriodWhereUniqueInput;
}

export enum MarketReportOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  at_ASC = "at_ASC",
  at_DESC = "at_DESC",

  by_ASC = "by_ASC",
  by_DESC = "by_DESC",
}

registerEnumType(MarketReportOrderByEnum, {
  name: "MarketReportOrderByInput",
});

@TypeGraphQLInputType()
export class MarketReportWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  at_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  at_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  at_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  at_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  at_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  at_in?: number[];

  @TypeGraphQLField({ nullable: true })
  by_eq?: string;

  @TypeGraphQLField({ nullable: true })
  by_contains?: string;

  @TypeGraphQLField({ nullable: true })
  by_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  by_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  by_in?: string[];

  @TypeGraphQLField(() => MarketReportWhereInput, { nullable: true })
  AND?: [MarketReportWhereInput];

  @TypeGraphQLField(() => MarketReportWhereInput, { nullable: true })
  OR?: [MarketReportWhereInput];
}

@TypeGraphQLInputType()
export class MarketReportWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class MarketReportCreateInput {
  @TypeGraphQLField()
  at!: number;

  @TypeGraphQLField()
  by!: string;
}

@TypeGraphQLInputType()
export class MarketReportUpdateInput {
  @TypeGraphQLField({ nullable: true })
  at?: number;

  @TypeGraphQLField({ nullable: true })
  by?: string;
}

@ArgsType()
export class MarketReportWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => MarketReportWhereInput, { nullable: true })
  where?: MarketReportWhereInput;

  @TypeGraphQLField(() => MarketReportOrderByEnum, { nullable: true })
  orderBy?: MarketReportOrderByEnum[];
}

@ArgsType()
export class MarketReportCreateManyArgs {
  @TypeGraphQLField(() => [MarketReportCreateInput])
  data!: MarketReportCreateInput[];
}

@ArgsType()
export class MarketReportUpdateArgs {
  @TypeGraphQLField() data!: MarketReportUpdateInput;
  @TypeGraphQLField() where!: MarketReportWhereUniqueInput;
}

export enum MarketTypeOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  categorical_ASC = "categorical_ASC",
  categorical_DESC = "categorical_DESC",

  scalar_ASC = "scalar_ASC",
  scalar_DESC = "scalar_DESC",
}

registerEnumType(MarketTypeOrderByEnum, {
  name: "MarketTypeOrderByInput",
});

@TypeGraphQLInputType()
export class MarketTypeWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  categorical_eq?: string;

  @TypeGraphQLField({ nullable: true })
  categorical_contains?: string;

  @TypeGraphQLField({ nullable: true })
  categorical_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  categorical_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  categorical_in?: string[];

  @TypeGraphQLField({ nullable: true })
  scalar_eq?: string;

  @TypeGraphQLField({ nullable: true })
  scalar_contains?: string;

  @TypeGraphQLField({ nullable: true })
  scalar_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  scalar_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  scalar_in?: string[];

  @TypeGraphQLField(() => MarketTypeWhereInput, { nullable: true })
  AND?: [MarketTypeWhereInput];

  @TypeGraphQLField(() => MarketTypeWhereInput, { nullable: true })
  OR?: [MarketTypeWhereInput];
}

@TypeGraphQLInputType()
export class MarketTypeWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class MarketTypeCreateInput {
  @TypeGraphQLField({ nullable: true })
  categorical?: string;

  @TypeGraphQLField({ nullable: true })
  scalar?: string;
}

@TypeGraphQLInputType()
export class MarketTypeUpdateInput {
  @TypeGraphQLField({ nullable: true })
  categorical?: string;

  @TypeGraphQLField({ nullable: true })
  scalar?: string;
}

@ArgsType()
export class MarketTypeWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => MarketTypeWhereInput, { nullable: true })
  where?: MarketTypeWhereInput;

  @TypeGraphQLField(() => MarketTypeOrderByEnum, { nullable: true })
  orderBy?: MarketTypeOrderByEnum[];
}

@ArgsType()
export class MarketTypeCreateManyArgs {
  @TypeGraphQLField(() => [MarketTypeCreateInput])
  data!: MarketTypeCreateInput[];
}

@ArgsType()
export class MarketTypeUpdateArgs {
  @TypeGraphQLField() data!: MarketTypeUpdateInput;
  @TypeGraphQLField() where!: MarketTypeWhereUniqueInput;
}

export enum OutcomeReportOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  categorical_ASC = "categorical_ASC",
  categorical_DESC = "categorical_DESC",

  scalar_ASC = "scalar_ASC",
  scalar_DESC = "scalar_DESC",
}

registerEnumType(OutcomeReportOrderByEnum, {
  name: "OutcomeReportOrderByInput",
});

@TypeGraphQLInputType()
export class OutcomeReportWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  categorical_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  categorical_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  categorical_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  categorical_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  categorical_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  categorical_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  scalar_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  scalar_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  scalar_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  scalar_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  scalar_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  scalar_in?: number[];

  @TypeGraphQLField(() => OutcomeReportWhereInput, { nullable: true })
  AND?: [OutcomeReportWhereInput];

  @TypeGraphQLField(() => OutcomeReportWhereInput, { nullable: true })
  OR?: [OutcomeReportWhereInput];
}

@TypeGraphQLInputType()
export class OutcomeReportWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class OutcomeReportCreateInput {
  @TypeGraphQLField({ nullable: true })
  categorical?: number;

  @TypeGraphQLField({ nullable: true })
  scalar?: number;
}

@TypeGraphQLInputType()
export class OutcomeReportUpdateInput {
  @TypeGraphQLField({ nullable: true })
  categorical?: number;

  @TypeGraphQLField({ nullable: true })
  scalar?: number;
}

@ArgsType()
export class OutcomeReportWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => OutcomeReportWhereInput, { nullable: true })
  where?: OutcomeReportWhereInput;

  @TypeGraphQLField(() => OutcomeReportOrderByEnum, { nullable: true })
  orderBy?: OutcomeReportOrderByEnum[];
}

@ArgsType()
export class OutcomeReportCreateManyArgs {
  @TypeGraphQLField(() => [OutcomeReportCreateInput])
  data!: OutcomeReportCreateInput[];
}

@ArgsType()
export class OutcomeReportUpdateArgs {
  @TypeGraphQLField() data!: OutcomeReportUpdateInput;
  @TypeGraphQLField() where!: OutcomeReportWhereUniqueInput;
}

export enum MarketOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  marketId_ASC = "marketId_ASC",
  marketId_DESC = "marketId_DESC",

  creator_ASC = "creator_ASC",
  creator_DESC = "creator_DESC",

  creation_ASC = "creation_ASC",
  creation_DESC = "creation_DESC",

  creatorFee_ASC = "creatorFee_ASC",
  creatorFee_DESC = "creatorFee_DESC",

  oracle_ASC = "oracle_ASC",
  oracle_DESC = "oracle_DESC",

  slug_ASC = "slug_ASC",
  slug_DESC = "slug_DESC",

  question_ASC = "question_ASC",
  question_DESC = "question_DESC",

  description_ASC = "description_ASC",
  description_DESC = "description_DESC",

  img_ASC = "img_ASC",
  img_DESC = "img_DESC",

  end_ASC = "end_ASC",
  end_DESC = "end_DESC",

  scoringRule_ASC = "scoringRule_ASC",
  scoringRule_DESC = "scoringRule_DESC",

  status_ASC = "status_ASC",
  status_DESC = "status_DESC",

  poolId_ASC = "poolId_ASC",
  poolId_DESC = "poolId_DESC",

  resolvedOutcome_ASC = "resolvedOutcome_ASC",
  resolvedOutcome_DESC = "resolvedOutcome_DESC",
}

registerEnumType(MarketOrderByEnum, {
  name: "MarketOrderByInput",
});

@TypeGraphQLInputType()
export class MarketWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  marketId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  marketId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  marketId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  marketId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  marketId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  marketId_in?: number[];

  @TypeGraphQLField({ nullable: true })
  creator_eq?: string;

  @TypeGraphQLField({ nullable: true })
  creator_contains?: string;

  @TypeGraphQLField({ nullable: true })
  creator_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  creator_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  creator_in?: string[];

  @TypeGraphQLField({ nullable: true })
  creation_eq?: string;

  @TypeGraphQLField({ nullable: true })
  creation_contains?: string;

  @TypeGraphQLField({ nullable: true })
  creation_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  creation_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  creation_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  creatorFee_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  creatorFee_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  creatorFee_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  creatorFee_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  creatorFee_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  creatorFee_in?: number[];

  @TypeGraphQLField({ nullable: true })
  oracle_eq?: string;

  @TypeGraphQLField({ nullable: true })
  oracle_contains?: string;

  @TypeGraphQLField({ nullable: true })
  oracle_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  oracle_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  oracle_in?: string[];

  @TypeGraphQLField({ nullable: true })
  slug_eq?: string;

  @TypeGraphQLField({ nullable: true })
  slug_contains?: string;

  @TypeGraphQLField({ nullable: true })
  slug_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  slug_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  slug_in?: string[];

  @TypeGraphQLField({ nullable: true })
  question_eq?: string;

  @TypeGraphQLField({ nullable: true })
  question_contains?: string;

  @TypeGraphQLField({ nullable: true })
  question_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  question_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  question_in?: string[];

  @TypeGraphQLField({ nullable: true })
  description_eq?: string;

  @TypeGraphQLField({ nullable: true })
  description_contains?: string;

  @TypeGraphQLField({ nullable: true })
  description_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  description_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  description_in?: string[];

  @TypeGraphQLField(() => GraphQLJSONObject, { nullable: true })
  categories_json?: JsonObject;

  @TypeGraphQLField(() => [String], { nullable: true })
  tags_containsAll?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  tags_containsNone?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  tags_containsAny?: [string];

  @TypeGraphQLField({ nullable: true })
  img_eq?: string;

  @TypeGraphQLField({ nullable: true })
  img_contains?: string;

  @TypeGraphQLField({ nullable: true })
  img_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  img_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  img_in?: string[];

  @TypeGraphQLField(() => GraphQLJSONObject, { nullable: true })
  marketType_json?: JsonObject;

  @TypeGraphQLField(() => GraphQLJSONObject, { nullable: true })
  period_json?: JsonObject;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  end_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  end_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  end_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  end_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  end_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  end_in?: string[];

  @TypeGraphQLField({ nullable: true })
  scoringRule_eq?: string;

  @TypeGraphQLField({ nullable: true })
  scoringRule_contains?: string;

  @TypeGraphQLField({ nullable: true })
  scoringRule_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  scoringRule_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  scoringRule_in?: string[];

  @TypeGraphQLField({ nullable: true })
  status_eq?: string;

  @TypeGraphQLField({ nullable: true })
  status_contains?: string;

  @TypeGraphQLField({ nullable: true })
  status_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  status_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  status_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  poolId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  poolId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  poolId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  poolId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  poolId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  poolId_in?: number[];

  @TypeGraphQLField(() => GraphQLJSONObject, { nullable: true })
  report_json?: JsonObject;

  @TypeGraphQLField({ nullable: true })
  resolvedOutcome_eq?: string;

  @TypeGraphQLField({ nullable: true })
  resolvedOutcome_contains?: string;

  @TypeGraphQLField({ nullable: true })
  resolvedOutcome_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  resolvedOutcome_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  resolvedOutcome_in?: string[];

  @TypeGraphQLField(() => GraphQLJSONObject, { nullable: true })
  mdm_json?: JsonObject;

  @TypeGraphQLField(() => GraphQLJSONObject, { nullable: true })
  marketHistory_json?: JsonObject;

  @TypeGraphQLField(() => MarketWhereInput, { nullable: true })
  AND?: [MarketWhereInput];

  @TypeGraphQLField(() => MarketWhereInput, { nullable: true })
  OR?: [MarketWhereInput];
}

@TypeGraphQLInputType()
export class MarketWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class MarketCreateInput {
  @TypeGraphQLField()
  marketId!: number;

  @TypeGraphQLField()
  creator!: string;

  @TypeGraphQLField()
  creation!: string;

  @TypeGraphQLField({ nullable: true })
  creatorFee?: number;

  @TypeGraphQLField()
  oracle!: string;

  @TypeGraphQLField({ nullable: true })
  slug?: string;

  @TypeGraphQLField({ nullable: true })
  question?: string;

  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField(() => CategoryMetadata, { nullable: true })
  categories?: CategoryMetadata;

  @TypeGraphQLField(() => [String], { nullable: true })
  tags?: string[];

  @TypeGraphQLField({ nullable: true })
  img?: string;

  @TypeGraphQLField(() => MarketType)
  marketType!: MarketType;

  @TypeGraphQLField(() => MarketPeriod)
  period!: MarketPeriod;

  @TypeGraphQLField()
  end!: string;

  @TypeGraphQLField()
  scoringRule!: string;

  @TypeGraphQLField()
  status!: string;

  @TypeGraphQLField({ nullable: true })
  poolId?: number;

  @TypeGraphQLField(() => MarketReport, { nullable: true })
  report?: MarketReport;

  @TypeGraphQLField({ nullable: true })
  resolvedOutcome?: string;

  @TypeGraphQLField(() => MarketDisputeMechanism)
  mdm!: MarketDisputeMechanism;

  @TypeGraphQLField(() => MarketHistory, { nullable: true })
  marketHistory?: MarketHistory;
}

@TypeGraphQLInputType()
export class MarketUpdateInput {
  @TypeGraphQLField({ nullable: true })
  marketId?: number;

  @TypeGraphQLField({ nullable: true })
  creator?: string;

  @TypeGraphQLField({ nullable: true })
  creation?: string;

  @TypeGraphQLField({ nullable: true })
  creatorFee?: number;

  @TypeGraphQLField({ nullable: true })
  oracle?: string;

  @TypeGraphQLField({ nullable: true })
  slug?: string;

  @TypeGraphQLField({ nullable: true })
  question?: string;

  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField(() => CategoryMetadata, { nullable: true })
  categories?: CategoryMetadata;

  @TypeGraphQLField(() => [String], { nullable: true })
  tags?: string[];

  @TypeGraphQLField({ nullable: true })
  img?: string;

  @TypeGraphQLField(() => MarketType, { nullable: true })
  marketType?: MarketType;

  @TypeGraphQLField(() => MarketPeriod, { nullable: true })
  period?: MarketPeriod;

  @TypeGraphQLField({ nullable: true })
  end?: string;

  @TypeGraphQLField({ nullable: true })
  scoringRule?: string;

  @TypeGraphQLField({ nullable: true })
  status?: string;

  @TypeGraphQLField({ nullable: true })
  poolId?: number;

  @TypeGraphQLField(() => MarketReport, { nullable: true })
  report?: MarketReport;

  @TypeGraphQLField({ nullable: true })
  resolvedOutcome?: string;

  @TypeGraphQLField(() => MarketDisputeMechanism, { nullable: true })
  mdm?: MarketDisputeMechanism;

  @TypeGraphQLField(() => MarketHistory, { nullable: true })
  marketHistory?: MarketHistory;
}

@ArgsType()
export class MarketWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => MarketWhereInput, { nullable: true })
  where?: MarketWhereInput;

  @TypeGraphQLField(() => MarketOrderByEnum, { nullable: true })
  orderBy?: MarketOrderByEnum[];
}

@ArgsType()
export class MarketCreateManyArgs {
  @TypeGraphQLField(() => [MarketCreateInput])
  data!: MarketCreateInput[];
}

@ArgsType()
export class MarketUpdateArgs {
  @TypeGraphQLField() data!: MarketUpdateInput;
  @TypeGraphQLField() where!: MarketWhereUniqueInput;
}
