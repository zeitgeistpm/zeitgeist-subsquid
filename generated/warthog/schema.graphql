type Authorized {
  value: String
}

interface BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModel implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModelUUID implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

input BaseWhereInput {
  id_eq: String
  id_in: [String!]
  createdAt_eq: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdById_eq: String
  updatedAt_eq: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedById_eq: String
  deletedAt_all: Boolean
  deletedAt_eq: String
  deletedAt_lt: String
  deletedAt_lte: String
  deletedAt_gt: String
  deletedAt_gte: String
  deletedById_eq: String
}

"""GraphQL representation of BigInt"""
scalar BigInt

type Block {
  value: String!
}

""" Tracks block timestamps """
type BlockTimestamp implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  blockNumber: Int!
  timestamp: BigInt!
}

type BlockTimestampConnection {
  totalCount: Int!
  edges: [BlockTimestampEdge!]!
  pageInfo: PageInfo!
}

input BlockTimestampCreateInput {
  blockNumber: Float!
  timestamp: String!
}

type BlockTimestampEdge {
  node: BlockTimestamp!
  cursor: String!
}

enum BlockTimestampOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  blockNumber_ASC
  blockNumber_DESC
  timestamp_ASC
  timestamp_DESC
}

input BlockTimestampUpdateInput {
  blockNumber: Float
  timestamp: String
}

input BlockTimestampWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  blockNumber_eq: Int
  blockNumber_gt: Int
  blockNumber_gte: Int
  blockNumber_lt: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  timestamp_eq: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  AND: [BlockTimestampWhereInput!]
  OR: [BlockTimestampWhereInput!]
}

input BlockTimestampWhereUniqueInput {
  id: ID!
}

"""GraphQL representation of Bytes"""
scalar Bytes

type Categorical {
  value: String!
}

type CommentSearchFTSOutput {
  item: CommentSearchSearchResult!
  rank: Float!
  isTypeOf: String!
  highlight: String!
}

union CommentSearchSearchResult = Transfer

type Court {
  value: Boolean
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

interface DeleteResponse {
  id: ID!
}

type Hello {
  greeting: String!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type Market implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  marketId: Int!
  creator: String!
  creation: String!
  oracle: String!
  slug: String
  question: String
  description: String
  marketType: MarketType!
  period: MarketPeriod!
  scoringRule: String!
  status: String!
  report: String!
  resolvedOutcome: String!
  mdm: MarketDisputeMechanism!
  marketHistory: [MarketHistory!]
}

type MarketConnection {
  totalCount: Int!
  edges: [MarketEdge!]!
  pageInfo: PageInfo!
}

input MarketCreateInput {
  marketId: Float!
  creator: String!
  creation: String!
  oracle: String!
  slug: String
  question: String
  description: String
  marketType: JSONObject!
  period: JSONObject!
  scoringRule: String!
  status: String!
  report: String!
  resolvedOutcome: String!
  mdm: JSONObject!
}

union MarketDisputeMechanism = Authorized | Court | SimpleDisputes

type MarketEdge {
  node: Market!
  cursor: String!
}

type MarketHistory implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  market: Market!
  marketId: String!
  status: String
  report: String
  resolvedOutcome: String
  blockNumber: Int!
  timestamp: BigInt!
}

type MarketHistoryConnection {
  totalCount: Int!
  edges: [MarketHistoryEdge!]!
  pageInfo: PageInfo!
}

input MarketHistoryCreateInput {
  market: ID!
  status: String
  report: String
  resolvedOutcome: String
  blockNumber: Float!
  timestamp: String!
}

type MarketHistoryEdge {
  node: MarketHistory!
  cursor: String!
}

enum MarketHistoryOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  market_ASC
  market_DESC
  status_ASC
  status_DESC
  report_ASC
  report_DESC
  resolvedOutcome_ASC
  resolvedOutcome_DESC
  blockNumber_ASC
  blockNumber_DESC
  timestamp_ASC
  timestamp_DESC
}

input MarketHistoryUpdateInput {
  market: ID
  status: String
  report: String
  resolvedOutcome: String
  blockNumber: Float
  timestamp: String
}

input MarketHistoryWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  status_eq: String
  status_contains: String
  status_startsWith: String
  status_endsWith: String
  status_in: [String!]
  report_eq: String
  report_contains: String
  report_startsWith: String
  report_endsWith: String
  report_in: [String!]
  resolvedOutcome_eq: String
  resolvedOutcome_contains: String
  resolvedOutcome_startsWith: String
  resolvedOutcome_endsWith: String
  resolvedOutcome_in: [String!]
  blockNumber_eq: Int
  blockNumber_gt: Int
  blockNumber_gte: Int
  blockNumber_lt: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  timestamp_eq: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  market: MarketWhereInput
  AND: [MarketHistoryWhereInput!]
  OR: [MarketHistoryWhereInput!]
}

input MarketHistoryWhereUniqueInput {
  id: ID!
}

enum MarketOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  marketId_ASC
  marketId_DESC
  creator_ASC
  creator_DESC
  creation_ASC
  creation_DESC
  oracle_ASC
  oracle_DESC
  slug_ASC
  slug_DESC
  question_ASC
  question_DESC
  description_ASC
  description_DESC
  scoringRule_ASC
  scoringRule_DESC
  status_ASC
  status_DESC
  report_ASC
  report_DESC
  resolvedOutcome_ASC
  resolvedOutcome_DESC
}

union MarketPeriod = Block | Timestamp

union MarketType = Categorical | Scalar

input MarketUpdateInput {
  marketId: Float
  creator: String
  creation: String
  oracle: String
  slug: String
  question: String
  description: String
  marketType: JSONObject
  period: JSONObject
  scoringRule: String
  status: String
  report: String
  resolvedOutcome: String
  mdm: JSONObject
}

input MarketWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  marketId_eq: Int
  marketId_gt: Int
  marketId_gte: Int
  marketId_lt: Int
  marketId_lte: Int
  marketId_in: [Int!]
  creator_eq: String
  creator_contains: String
  creator_startsWith: String
  creator_endsWith: String
  creator_in: [String!]
  creation_eq: String
  creation_contains: String
  creation_startsWith: String
  creation_endsWith: String
  creation_in: [String!]
  oracle_eq: String
  oracle_contains: String
  oracle_startsWith: String
  oracle_endsWith: String
  oracle_in: [String!]
  slug_eq: String
  slug_contains: String
  slug_startsWith: String
  slug_endsWith: String
  slug_in: [String!]
  question_eq: String
  question_contains: String
  question_startsWith: String
  question_endsWith: String
  question_in: [String!]
  description_eq: String
  description_contains: String
  description_startsWith: String
  description_endsWith: String
  description_in: [String!]
  marketType_json: JSONObject
  period_json: JSONObject
  scoringRule_eq: String
  scoringRule_contains: String
  scoringRule_startsWith: String
  scoringRule_endsWith: String
  scoringRule_in: [String!]
  status_eq: String
  status_contains: String
  status_startsWith: String
  status_endsWith: String
  status_in: [String!]
  report_eq: String
  report_contains: String
  report_startsWith: String
  report_endsWith: String
  report_in: [String!]
  resolvedOutcome_eq: String
  resolvedOutcome_contains: String
  resolvedOutcome_startsWith: String
  resolvedOutcome_endsWith: String
  resolvedOutcome_in: [String!]
  mdm_json: JSONObject
  marketHistory_none: MarketHistoryWhereInput
  marketHistory_some: MarketHistoryWhereInput
  marketHistory_every: MarketHistoryWhereInput
  AND: [MarketWhereInput!]
  OR: [MarketWhereInput!]
}

input MarketWhereUniqueInput {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Pool implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  poolId: Int!
  baseAsset: String!
  marketId: Int!
  poolStatus: String!
  scoringRule: String!
  swapFee: String!
  totalSubsidy: String!
  totalWeight: String!
  blockNumber: Int!
  timestamp: BigInt!
}

type PoolConnection {
  totalCount: Int!
  edges: [PoolEdge!]!
  pageInfo: PageInfo!
}

input PoolCreateInput {
  poolId: Float!
  baseAsset: String!
  marketId: Float!
  poolStatus: String!
  scoringRule: String!
  swapFee: String!
  totalSubsidy: String!
  totalWeight: String!
  blockNumber: Float!
  timestamp: String!
}

type PoolEdge {
  node: Pool!
  cursor: String!
}

enum PoolOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  poolId_ASC
  poolId_DESC
  baseAsset_ASC
  baseAsset_DESC
  marketId_ASC
  marketId_DESC
  poolStatus_ASC
  poolStatus_DESC
  scoringRule_ASC
  scoringRule_DESC
  swapFee_ASC
  swapFee_DESC
  totalSubsidy_ASC
  totalSubsidy_DESC
  totalWeight_ASC
  totalWeight_DESC
  blockNumber_ASC
  blockNumber_DESC
  timestamp_ASC
  timestamp_DESC
}

input PoolUpdateInput {
  poolId: Float
  baseAsset: String
  marketId: Float
  poolStatus: String
  scoringRule: String
  swapFee: String
  totalSubsidy: String
  totalWeight: String
  blockNumber: Float
  timestamp: String
}

input PoolWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  poolId_eq: Int
  poolId_gt: Int
  poolId_gte: Int
  poolId_lt: Int
  poolId_lte: Int
  poolId_in: [Int!]
  baseAsset_eq: String
  baseAsset_contains: String
  baseAsset_startsWith: String
  baseAsset_endsWith: String
  baseAsset_in: [String!]
  marketId_eq: Int
  marketId_gt: Int
  marketId_gte: Int
  marketId_lt: Int
  marketId_lte: Int
  marketId_in: [Int!]
  poolStatus_eq: String
  poolStatus_contains: String
  poolStatus_startsWith: String
  poolStatus_endsWith: String
  poolStatus_in: [String!]
  scoringRule_eq: String
  scoringRule_contains: String
  scoringRule_startsWith: String
  scoringRule_endsWith: String
  scoringRule_in: [String!]
  swapFee_eq: String
  swapFee_contains: String
  swapFee_startsWith: String
  swapFee_endsWith: String
  swapFee_in: [String!]
  totalSubsidy_eq: String
  totalSubsidy_contains: String
  totalSubsidy_startsWith: String
  totalSubsidy_endsWith: String
  totalSubsidy_in: [String!]
  totalWeight_eq: String
  totalWeight_contains: String
  totalWeight_startsWith: String
  totalWeight_endsWith: String
  totalWeight_in: [String!]
  blockNumber_eq: Int
  blockNumber_gt: Int
  blockNumber_gte: Int
  blockNumber_lt: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  timestamp_eq: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  AND: [PoolWhereInput!]
  OR: [PoolWhereInput!]
}

input PoolWhereUniqueInput {
  id: ID!
}

type ProcessorState {
  lastCompleteBlock: Float!
  lastProcessedEvent: String!
  indexerHead: Float!
  chainHead: Float!
}

type Query {
  blockTimestamps(offset: Int, limit: Int = 50, where: BlockTimestampWhereInput, orderBy: [BlockTimestampOrderByInput!]): [BlockTimestamp!]!
  blockTimestampByUniqueInput(where: BlockTimestampWhereUniqueInput!): BlockTimestamp
  blockTimestampsConnection(first: Int, after: String, last: Int, before: String, where: BlockTimestampWhereInput, orderBy: [BlockTimestampOrderByInput!]): BlockTimestampConnection!
  marketHistories(offset: Int, limit: Int = 50, where: MarketHistoryWhereInput, orderBy: [MarketHistoryOrderByInput!]): [MarketHistory!]!
  marketHistoryByUniqueInput(where: MarketHistoryWhereUniqueInput!): MarketHistory
  marketHistoriesConnection(first: Int, after: String, last: Int, before: String, where: MarketHistoryWhereInput, orderBy: [MarketHistoryOrderByInput!]): MarketHistoryConnection!
  markets(offset: Int, limit: Int = 50, where: MarketWhereInput, orderBy: [MarketOrderByInput!]): [Market!]!
  marketByUniqueInput(where: MarketWhereUniqueInput!): Market
  marketsConnection(first: Int, after: String, last: Int, before: String, where: MarketWhereInput, orderBy: [MarketOrderByInput!]): MarketConnection!
  pools(offset: Int, limit: Int = 50, where: PoolWhereInput, orderBy: [PoolOrderByInput!]): [Pool!]!
  poolByUniqueInput(where: PoolWhereUniqueInput!): Pool
  poolsConnection(first: Int, after: String, last: Int, before: String, where: PoolWhereInput, orderBy: [PoolOrderByInput!]): PoolConnection!
  commentSearch(whereTransfer: TransferWhereInput, skip: Int = 0, limit: Int = 5, text: String!): [CommentSearchFTSOutput!]!
  transfers(offset: Int, limit: Int = 50, where: TransferWhereInput, orderBy: [TransferOrderByInput!]): [Transfer!]!
  transferByUniqueInput(where: TransferWhereUniqueInput!): Transfer
  transfersConnection(first: Int, after: String, last: Int, before: String, where: TransferWhereInput, orderBy: [TransferOrderByInput!]): TransferConnection!
  hello: Hello!
}

type Scalar {
  value: String!
}

type SimpleDisputes {
  value: Boolean
}

type StandardDeleteResponse {
  id: ID!
}

type Subscription {
  stateSubscription: ProcessorState!
}

type Timestamp {
  value: String!
}

""" All transfers """
type Transfer implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  from: Bytes!
  to: Bytes!
  value: BigInt!
  comment: String
  block: Int!
  tip: BigInt!
  timestamp: BigInt!
  insertedAt: DateTime!
}

type TransferConnection {
  totalCount: Int!
  edges: [TransferEdge!]!
  pageInfo: PageInfo!
}

input TransferCreateInput {
  from: String!
  to: String!
  value: String!
  comment: String
  block: Float!
  tip: String!
  timestamp: String!
  insertedAt: DateTime!
}

type TransferEdge {
  node: Transfer!
  cursor: String!
}

enum TransferOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  from_ASC
  from_DESC
  to_ASC
  to_DESC
  value_ASC
  value_DESC
  comment_ASC
  comment_DESC
  block_ASC
  block_DESC
  tip_ASC
  tip_DESC
  timestamp_ASC
  timestamp_DESC
  insertedAt_ASC
  insertedAt_DESC
}

input TransferUpdateInput {
  from: String
  to: String
  value: String
  comment: String
  block: Float
  tip: String
  timestamp: String
  insertedAt: DateTime
}

input TransferWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  from_eq: Bytes
  from_in: [Bytes!]
  to_eq: Bytes
  to_in: [Bytes!]
  value_eq: BigInt
  value_gt: BigInt
  value_gte: BigInt
  value_lt: BigInt
  value_lte: BigInt
  value_in: [BigInt!]
  comment_eq: String
  comment_contains: String
  comment_startsWith: String
  comment_endsWith: String
  comment_in: [String!]
  block_eq: Int
  block_gt: Int
  block_gte: Int
  block_lt: Int
  block_lte: Int
  block_in: [Int!]
  tip_eq: BigInt
  tip_gt: BigInt
  tip_gte: BigInt
  tip_lt: BigInt
  tip_lte: BigInt
  tip_in: [BigInt!]
  timestamp_eq: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  insertedAt_eq: DateTime
  insertedAt_lt: DateTime
  insertedAt_lte: DateTime
  insertedAt_gt: DateTime
  insertedAt_gte: DateTime
  AND: [TransferWhereInput!]
  OR: [TransferWhereInput!]
}

input TransferWhereUniqueInput {
  id: ID!
}
