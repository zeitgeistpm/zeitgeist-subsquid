type Account @entity {
  "Account address"
  wallet: String!
  accountBalances: [AccountBalance] @derivedFrom(field: "account")
}

type AccountBalance @entity {
  account: Account!
  assetId: String!
  balance: BigInt!
}

type HistoricalAccountBalance @entity {
  accountId: String!
  event: String!
  assetId: String!
  amount: BigInt!
  balance: BigInt!
  blockNumber: Int!
  timestamp: DateTime!
}

type Asset @entity {
  assetId: String!
  poolId: Int
  price: Float
  qty: BigInt
}

type HistoricalAsset @entity {
  assetId: String!
  dPrice: Float
  dQty: BigInt!
  price: Float
  qty: BigInt!
  event: String!
  blockNumber: Int!
  timestamp: DateTime!
}

type Market @entity {
  marketId: Int! 
  creator: String!
  creation: String!
  creatorFee: Int
  oracle: String!
  outcomeAssets: [String]!
  slug: String
  question: String
  description: String
  categories: [CategoryMetadata]
  tags: [String]
  img: String
  marketType: MarketType!
  period: MarketPeriod!
  end: BigInt!
  scoringRule: String!
  status: String!
  poolId: Int
  report: MarketReport
  resolvedOutcome: String
  mdm: MarketDisputeMechanism!
}

type HistoricalMarket @entity {
  marketId: Int!
  event: String!
  status: String
  poolId: Int
  report: MarketReport
  resolvedOutcome: String
  blockNumber: Int!
  timestamp: DateTime!
}

type Pool @entity {
  poolId: Int!
  accountId: String
  baseAsset: String!
  marketId: Int!
  poolStatus: String!
  scoringRule: String!
  swapFee: String!
  totalSubsidy: String!
  totalWeight: String!
  weights: [Weight]!
  ztgQty: BigInt!
  volume: BigInt!
}

type HistoricalPool @entity {
  poolId: Int!
  event: String!
  ztgQty: BigInt!
  volume: BigInt
  blockNumber: Int!
  timestamp: DateTime!
}

type Weight @jsonField {
  assetId: String!
  len: BigInt!
}

type CategoryMetadata @jsonField {
  name: String
  ticker: String
  img: String
  color: String
}

type MarketType @jsonField {
  categorical: String
  scalar: String
}

type MarketPeriod @jsonField {
  block: String
  timestamp: String
}

enum MarketStatus {
  Active,
  CollectingSubsidy,
  InsufficientSubsidy,
  Reported,
  Disputed,
  Rejected,
  Cancelled
}

type MarketReport @jsonField {
  at: Int!
  by: String!
  outcome: OutcomeReport!
}

type OutcomeReport @jsonField {
  categorical: Int
  scalar: Int
}

type MarketDisputeMechanism @jsonField {
  authorized: String
  court: Boolean
  simpleDisputes: Boolean
}