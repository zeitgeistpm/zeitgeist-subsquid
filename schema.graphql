"""
A type that has ss58 address format of the account. As soon as the chain
encounters any new address, they get registered here as user/pool/market account.
"""
type Account @entity {
  "Account address"
  accountId: String!
  "List of balances connected to the account"
  balances: [AccountBalance]! @derivedFrom(field: "account")
  "Unique identifier of the object"
  id: ID!
  "Zeitgeist's identifier for market. Valid only for market account."
  marketId: Int
}

"""
Balance of a particular asset denoted by assetId present in the account
"""
type AccountBalance @entity {
  "Connected account"
  account: Account!
  "Zeitgeist's identifier for asset"
  assetId: String!
  "Balance of the asset"
  balance: BigInt!
  "Unique identifier of the object"
  id: ID!
}

"""
Balance history of a particular asset in an account. Records all transactions
associated with the account.
"""
type HistoricalAccountBalance @entity {
  "Account address"
  accountId: String! @index
  "Zeitgeist's identifier for asset"
  assetId: String!
  "Height of the block"
  blockNumber: Int!
  "Balance difference"
  dBalance: BigInt!
  "Event method which initiated this change"
  event: String!
  "Extrinsic responsible for this change"
  extrinsic: Extrinsic
  "Unique identifier of the object"
  id: ID!
  "Timestamp of the block"
  timestamp: DateTime!
}

"""
A type that has detail of the outcome asset. It is initialised as soon as the
market is created and price is assigned when pool is deployed for the market.
"""
type Asset @entity {
  "Balance of the asset present in the pool account"
  amountInPool: BigInt!
  "Zeitgeist's identifier for asset"
  assetId: String!
  "Color identifier"
  color: String
  "Image identifier"
  img: String
  "Connected market"
  market: Market!
  "Title ex. `Locomotiv will not be defeated`"
  name: String
  "Connected pool"
  pool: Pool
  "Spot price of the asset in the pool"
  price: Float!
  "Short abbreviation ex. `LMDRAW`"
  ticker: String
}

"""
A type that records the price history of an outcome asset.
"""
type HistoricalAsset @entity {
  "Unique identifier of the object"
  id: ID!
  "Account which executed the trade"
  accountId: String @index
  "Zeitgeist's identifier for asset"
  assetId: String! @index
  "Price of the asset has decreased if -ve and +ve if increased"
  dPrice: Float
  "Units of asset user bought (-ve) or sold (+ve)"
  dAmountInPool: BigInt
  "Price of the asset after trade execution/market resolution"
  newPrice: Float
  "Units of asset present in the pool account"
  newAmountInPool: BigInt
  "Event method which initiated this change"
  event: String!
  "Height of the block"
  blockNumber: Int!
  "Timestamp of the block"
  timestamp: DateTime!
}

"""
A type that records the trade history of an account.
"""
type HistoricalSwap @entity {
  "Unique identifier of the object"
  id: ID!
  "Account which executed the trade"
  accountId: String! @index
  "Asset sold by the user"
  assetIn: String!
  "Asset bought by the user"
  assetOut: String!
  "Units of asset user sold"
  assetAmountIn: BigInt!
  "Units of asset user bought"
  assetAmountOut: BigInt!
  "Event method which initiated this swap"
  event: String!
  "External fees occuring out of trade"
  externalFeeAmount: BigInt
  "Extrinsic responsible for this change"
  extrinsic: Extrinsic
  "Height of the block"
  blockNumber: Int!
  "Swap fees"
  swapFeeAmount: BigInt
  "Timestamp of the block"
  timestamp: DateTime!
}

"""
A type that records the order history of a market.
"""
type Order @entity {
  createdAt: DateTime!
  id: ID!
  makerAccountId: String! @index
  maker: OrderRecord!
  marketId: Int! @index
  status: OrderStatus!
  taker: OrderRecord!
  updatedAt: DateTime!
}

"""
A type that records the history of an order.
"""
type HistoricalOrder @entity {
  accountId: String! @index
  assetIn: String!
  assetOut: String!
  assetAmountIn: BigInt!
  assetAmountOut: BigInt!
  blockNumber: Int!
  event: OrderEvent!
  externalFeeAmount: BigInt
  extrinsic: Extrinsic
  orderId: Int! @index
  timestamp: DateTime!
}

"""
Prediction market details
"""
type Market @entity {
  "Address responsible for authorizing disputes. Null if Adv Comm is the authority"
  authorizedAddress: String
  "List of assets connected to the market"
  assets: [Asset!]! @derivedFrom(field: "market")
  "The base asset in the market swap pool (usually a currency)"
  baseAsset: String!
  "Tracks the status of the advisory, oracle and validity bonds"
  bonds: MarketBonds
  "Name of all categories glued together"
  categoryNames: String
  "Share details"
  categories: [CategoryMetadata!]
  "Can be `Permissionless` or `Advised`"
  creation: MarketCreation!
  "Account address of the market creator"
  creator: String!
  "The creator's fee"
  creatorFee: Int
  "Deadlines for the market represented in blocks"
  deadlines: MarketDeadlines
  "Description of the market"
  description: String
  "The dispute information for each dispute that's been issued"
  disputes: [MarketReport]
  "Can be `Authorized`/`Court`/`SimpleDisputes` or undefined"
  disputeMechanism: DisputeMechanism
  "`True` if early closure is scheduled"
  earlyClose: Boolean!
  "Checks if each category has a name for display on UI"
  hasValidMetaCategories: Boolean!
  "Image for the market"
  img: String
  "Liquidity on the market's pool"
  liquidity: BigInt!
  "Zeitgeist's identifier for market"
  marketId: Int! @index
  "Type of the market"
  marketType: MarketType!
  "IPFS cid for market metadata"
  metadata: String!
  "Account designated to report on the market"
  oracle: String!
  "Share identifiers"
  outcomeAssets: [String!]!
  "Time period expressed in block numbers or timestamps"
  period: MarketPeriod!
  "Market's liquidity pool details"
  pool: Pool
  "Market's amm2 pool details"
  neoPool: NeoPool
  "Reasoning for market rejection"
  rejectReason: String
  "Reported outcome of the market. Null if the market is not reported yet"
  report: MarketReport
  "Resolved outcome for the market"
  resolvedOutcome: String
  "Type of scalar range if market is of type scalar"
  scalarType: String
  "Scoring rule used for the market"
  scoringRule: ScoringRule!
  "Short name for the market"
  slug: String
  "Status of the market"
  status: MarketStatus!
  "Market tags"
  tags: [String]
  "Total amount of base-asset that has moved through a market's liquidity pool"
  volume: BigInt!
  "Market question"
  question: String
}

"""
Market history of a particular market. Records all transactions
associated with the market.
"""
type HistoricalMarket @entity {
  "Height of the block"
  blockNumber: Int!
  "The account that reported or disputed"
  by: String
  "Change in market liquidity"
  dLiquidity: BigInt!
  "Change in market volume"
  dVolume: BigInt!
  "Event method which initiated this change"
  event: MarketEvent!
  "New updated liquidity"
  liquidity: BigInt!
  "Details of the connected market"
  market: Market!
  "Reported or disputed outcome for the market"
  outcome: OutcomeReport
  "Latest resolved outcome"
  resolvedOutcome: String
  "Latest market status"
  status: MarketStatus!
  "Timestamp of the block"
  timestamp: DateTime!
  "New updated volume"
  volume: BigInt!
}

"""
Liquidity pool details
"""
type Pool @entity {
  "Account for the pool"
  account: Account!
  "List of assets connected to the pool"
  assets: [Asset!]! @derivedFrom(field: "pool")
  "The base asset in the market swap pool (usually a currency)"
  baseAsset: String!
  "Timestamp of pool creation"
  createdAt: DateTime!
  "Zeitgeist's identifier for market connected to the pool"
  marketId: Int! @index
  "Zeitgeist's identifier for pool"
  poolId: Int! @index
  "Status of the pool"
  status: PoolStatus!
  "Fee applied to each swap"
  swapFee: String
  "Subsidy gathered for the market"
  totalSubsidy: String
  "Sum of `weights`"
  totalWeight: String!
  "List of lengths for each asset"
  weights: [Weight!]!
}

"""
AMM2 pool details
"""
type NeoPool @entity {
  account: Account!
  collateral: String!
  createdAt: DateTime!
  liquidityParameter: BigInt!
  liquiditySharesManager: [LiquiditySharesManager!]! @derivedFrom(field: "neoPool")
  marketId: Int! @index
  marketIds: [Int!]!
  poolId: Int! @index
  swapFee: BigInt!
  totalStake: BigInt!
}

type LiquiditySharesManager @entity {
  account: String! @index
  fees: BigInt!
  neoPool: NeoPool!
  stake: BigInt!
}

"""
Liquidity history of a particular pool. Records all transactions
associated with the pool.
"""
type HistoricalPool @entity {
  "Height of the block"
  blockNumber: Int!
  "Event method which initiated this change"
  event: String!
  "Zeitgeist's identifier for pool"
  poolId: Int!
  "Current status of the pool"
  status: PoolStatus
  "Timestamp of the block"
  timestamp: DateTime!
}

"""
Court details
"""
type Court @entity {
  marketId: Int! @index
  roundEnds: RoundEndsInfo!
  status: CourtStatus!
  voteItemType: VoteItemType!
}

"""
History of a particular court capturing its lifecyle and juror participation.
"""
type HistoricalCourt @entity {
  accountId: String @index
  blockNumber: Int!
  courtId: Int! @index
  event: CourtEvent!
  timestamp: DateTime!
}

type HistoricalToken @entity {
  accountId: String! @index
  amount: BigInt!
  assetIn: [String!]!
  assetOut: [String!]!
  blockNumber: Int!
  marketId: Int! @index
  event: TokenEvent!
  timestamp: DateTime!
}

"""
Extrinsic data
"""
type Extrinsic @jsonField {
  "Extrinsic hash"
  hash: String!
  "Name of the extrinsic"
  name: String
}

"""
Asset weightage details
"""
type Weight @jsonField {
  "Zeitgeist's identifier for asset"
  assetId: String!
  "Weight of the asset"
  weight: BigInt!
}

"""
Amount reserved for creation of markets, selecting oracles, joining the council,
making treasury proposals, setting on-chain identities, voting,
creating DAOs, and other parts of the protocol.
"""
type MarketBonds @jsonField {
  "Bond associated with creation of markets"
  creation: MarketBond!
  "Bond reserved by the disputant"
  dispute: MarketBond
  "Bond associated with oracle selection"
  oracle: MarketBond!
  "A bond for an outcome reporter, who is not the oracle"
  outsider: MarketBond
}

"""
Market's bond details
"""
type MarketBond @jsonField {
  "The flag which determines if the bond was already unreserved and/or (partially) slashed"
  isSettled: Boolean!
  "Amount reserved"
  value: BigInt!
  "The account that reserved the bond"
  who: String!
}

"""
Market's share details
"""
type CategoryMetadata @jsonField {
  "Title ex. `Locomotiv will not be defeated`"
  name: String
  "Short abbreviation ex. `LMDRAW`"
  ticker: String
  "Image identifier"
  img: String
  "Color identifier"
  color: String
}

"""
Deadlines for the market represented in blocks
"""
type MarketDeadlines @jsonField {
  gracePeriod: BigInt!
  oracleDuration: BigInt!
  disputeDuration: BigInt!
}

"""
Market's types
"""
type MarketType @jsonField {
  "Number of categories if categorical market"
  categorical: String
  "Range of values if scalar market"
  scalar: [String]
}

"""
Time period of the market
"""
type MarketPeriod @jsonField {
  "start & end block numbers"
  block: [BigInt]
  "Timestamp at which market should end"
  end: BigInt!
  "Timestamp at which market should start"
  start: BigInt!
  "start & end timestamps"
  timestamp: [BigInt]
}

"""
Market's report details
"""
type MarketReport @jsonField {
  "Block number"
  at: Int
  "Account which reported"
  by: String
  "Outcome details"
  outcome: OutcomeReport
}

"""
Market's outcome details
"""
type OutcomeReport @jsonField {
  "Index of the categories. Null if market is scalar"
  categorical: Int
  "Resultant value from the scalar range. Null if market is categorical"
  scalar: BigInt
}

type OrderRecord @jsonField {
  asset: String!
  filledAmount: BigInt!
  unfilledAmount: BigInt!
}

type RoundEndsInfo @jsonField {
  preVote: BigInt
  vote: BigInt
  aggregation: BigInt
  appeal: BigInt
}

"""
Courts' event options
"""
enum CourtEvent {
  CourtOpened
  JurorRevealedVote
  JurorVoted
  StakesReassigned
}

"""
Courts' status options
"""
enum CourtStatus {
  Closed
  Open
  Reassigned
}

"""
Markets' dispute options
"""
enum DisputeMechanism {
  Authorized
  Court
  SimpleDisputes
}

"""
Markets' creation options
"""
enum MarketCreation {
  Advised
  Permissionless
}

"""
Markets' event options
"""
enum MarketEvent {
  ArbitrageBuyBurn
  ArbritrageMintSell
  BuyExecuted
  CombinatorialPoolDeployed
  ComboBuyExecuted
  ComboSellExecuted
  ExitExecuted
  GlobalDisputeStarted
  JoinExecuted
  MarketApproved
  MarketClosed
  MarketCreated
  MarketDestroyed
  MarketDisputed
  MarketEarlyCloseScheduled
  MarketExpired
  MarketInsufficientSubsidy
  MarketRejected
  MarketReported
  MarketResolved
  MarketStartedWithSubsidy
  OutcomeBought
  PoolDeployed
  PoolDestroyed
  PoolExit
  PoolJoin
  SellExecuted
  SwapExactAmountIn
  SwapExactAmountOut
}

"""
Markets' status options
"""
enum MarketStatus {
  Active
  Closed
  CollectingSubsidy
  Destroyed
  Disputed
  Expired
  InsufficientSubsidy
  Proposed
  Rejected
  Reported
  Resolved
  Suspended
}

"""
Orders' event options
"""
enum OrderEvent {
  OrderFilled
}

"""
Orders' status options
"""
enum OrderStatus {
  Filled
  Placed
  Removed
}

"""
Pools' status options
"""
enum PoolStatus {
  Active
  Clean
  Closed
  CollectingSubsidy
  Destroyed
  Initialized
}

"""
Markets' scoring rule options
"""
enum ScoringRule {
  AmmCdaHybrid
  CPMM
  Lmsr
  Orderbook
  Parimutuel
  RikiddoSigmoidFeeMarketEma
}

"""
Swaps' event options
"""
enum SwapEvent {
  BuyExecuted
  OrderFilled
  OutcomeBought
  SellExecuted
  SwapExactAmountIn
  SwapExactAmountOut
}

enum TokenEvent {
  TokenMerged
  TokenRedeemed
  TokenSplit
}

"""
Types of vote items
"""
enum VoteItemType {
  Binary
  Outcome
}
